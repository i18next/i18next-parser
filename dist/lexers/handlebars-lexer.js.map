{"version":3,"sources":["../../src/lexers/handlebars-lexer.js"],"names":["HandlebarsLexer","options","functions","createFunctionRegex","createArgumentsRegex","content","matches","functionRegex","exec","args","parseArguments","populateKeysFromArguments","keys","result","arguments","argumentsRegex","arg","parts","split","push","length","validateString","slice","firstArgument","secondArgument","isKeyString","isDefaultValueString","emit","key","defaultValue","functionPattern","curlyPattern","parenthesisPattern","pattern","RegExp","BaseLexer","variablePattern","stringOrVariablePattern","stringPattern"],"mappings":"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","sourcesContent":["import BaseLexer from './base-lexer'\n\nexport default class HandlebarsLexer extends BaseLexer {\n  constructor(options = {}) {\n    super(options)\n\n    this.functions = options.functions || ['t']\n\n    this.createFunctionRegex()\n    this.createArgumentsRegex()\n  }\n\n  extract(content) {\n    let matches\n\n    while ((matches = this.functionRegex.exec(content))) {\n      const args = this.parseArguments(matches[1] || matches[2])\n      this.populateKeysFromArguments(args)\n    }\n\n    return this.keys\n  }\n\n  parseArguments(args) {\n    let matches\n    const result = {\n      arguments: [],\n      options: {},\n    }\n    while ((matches = this.argumentsRegex.exec(args))) {\n      const arg = matches[1]\n      const parts = arg.split('=')\n      result.arguments.push(arg)\n      if (parts.length === 2 && this.validateString(parts[1])) {\n        result.options[parts[0]] = parts[1].slice(1, -1)\n      }\n    }\n    return result\n  }\n\n  populateKeysFromArguments(args) {\n    const firstArgument = args.arguments[0]\n    const secondArgument = args.arguments[1]\n    const isKeyString = this.validateString(firstArgument)\n    const isDefaultValueString = this.validateString(secondArgument)\n\n    if (!isKeyString) {\n      this.emit('warning', `Key is not a string literal: ${firstArgument}`)\n    } else {\n      const result = {\n        ...args.options,\n        key: firstArgument.slice(1, -1),\n      }\n      if (isDefaultValueString) {\n        result.defaultValue = secondArgument.slice(1, -1)\n      }\n      this.keys.push(result)\n    }\n  }\n\n  createFunctionRegex() {\n    const functionPattern = this.functionPattern()\n    const curlyPattern = '(?:{{)' + functionPattern + '\\\\s+(.*?)(?:}})'\n    const parenthesisPattern = '(?:\\\\()' + functionPattern + '\\\\s+(.*)(?:\\\\))'\n    const pattern = curlyPattern + '|' + parenthesisPattern\n    this.functionRegex = new RegExp(pattern, 'gi')\n    return this.functionRegex\n  }\n\n  createArgumentsRegex() {\n    const pattern =\n      '(?:\\\\s+|^)' +\n      '(' +\n      '(?:' +\n      BaseLexer.variablePattern +\n      '(?:=' +\n      BaseLexer.stringOrVariablePattern +\n      ')?' +\n      ')' +\n      '|' +\n      BaseLexer.stringPattern +\n      ')'\n    this.argumentsRegex = new RegExp(pattern, 'gi')\n    return this.argumentsRegex\n  }\n}\n"],"file":"handlebars-lexer.js"}