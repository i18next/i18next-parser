{"version":3,"sources":["../src/broccoli.js"],"names":["Promise","rsvp","i18nextParser","inputNodes","options","arguments","outputPath","resolve","reject","files","count","vfs","src","inputPaths","map","x","pipe","i18nTransform","on","file","silent","console","log","green","path","push","fse","outputFile","contents","message","region","trim","red","yellow","all","then","Plugin"],"mappings":"gqBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2D;;AAEA,IAAMA,OAAO,GAAGC,iBAAKD,OAArB,C;;AAEqBE,a;AACnB,yBAAYC,UAAZ,EAAsC,eAAdC,OAAc,uEAAJ,EAAI;AACpC,+BAASC,SAAT;AACA,UAAKD,OAAL,GAAeA,OAAf,CAFoC;AAGrC,G;;AAED,qBAAQ;AACN,UAAME,UAAU,GAAG,KAAKA,UAAxB;AACA,aAAO,IAAIN,OAAJ,CAAY,UAACO,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAMC,KAAK,GAAG,EAAd;AACA,YAAIC,KAAK,GAAG,CAAZ;;AAEAC;AACGC,QAAAA,GADH,CACO,MAAI,CAACC,UAAL,CAAgBC,GAAhB,CAAoB,UAACC,CAAD,UAAOA,CAAC,GAAG,gBAAX,EAApB,CADP;AAEGC,QAAAA,IAFH,CAEQ,2BAFR;AAGGA,QAAAA,IAHH;AAII,YAAIC,qBAAJ,CAAkB,MAAI,CAACb,OAAvB;AACGc,QAAAA,EADH,CACM,SADN,EACiB,UAAUC,IAAV,EAAgB;AAC7B,cAAI,CAAC,KAAKf,OAAL,CAAagB,MAAlB,EAA0B;AACxBC,YAAAA,OAAO,CAACC,GAAR,CAAY,aAAaC,KAAb,GAAqBJ,IAAI,CAACK,IAAtC;AACD;AACDd,UAAAA,KAAK;AACN,SANH;AAOGQ,QAAAA,EAPH,CAOM,MAPN,EAOc,UAAUC,IAAV,EAAgB;AAC1BV,UAAAA,KAAK,CAACgB,IAAN,CAAWC,oBAAIC,UAAJ,CAAeR,IAAI,CAACK,IAApB,EAA0BL,IAAI,CAACS,QAA/B,CAAX;AACA,cAAI,CAAC,KAAKxB,OAAL,CAAagB,MAAlB,EAA0B;AACxBC,YAAAA,OAAO,CAACC,GAAR,CAAY,aAAaC,KAAb,GAAqBJ,IAAI,CAACK,IAAtC;AACD;AACF,SAZH;AAaGN,QAAAA,EAbH,CAaM,OAbN,EAae,UAAUW,OAAV,EAAmBC,MAAnB,EAA2B;AACtC,cAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC9BD,YAAAA,OAAO,IAAI,OAAOC,MAAM,CAACC,IAAP,EAAlB;AACD;AACDV,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAaU,GAAb,GAAmBH,OAA/B;AACD,SAlBH;AAmBGX,QAAAA,EAnBH,CAmBM,QAnBN,EAmBgB,YAAY;AACxB,cAAI,CAAC,KAAKd,OAAL,CAAagB,MAAlB,EAA0B;AACxBC,YAAAA,OAAO,CAACC,GAAR;AACD;AACDD,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAaW,MAAb,GAAsBvB,KAAtB,GAA8B,oBAA1C;;AAEAV,UAAAA,OAAO,CAACkC,GAAR,CAAYzB,KAAZ,EAAmB0B,IAAnB,CAAwB,YAAM;AAC5B5B,YAAAA,OAAO,CAACE,KAAD,CAAP;AACD,WAFD;AAGD,SA5BH,CAJJ;;AAkCD,OAtCM,CAAP;AAuCD,K,4BA/CwC2B,0B","sourcesContent":["import colors from 'colors'\nimport fse from 'fs-extra'\nimport path from 'path'\nimport Plugin from 'broccoli-plugin'\nimport i18nTransform from '../dist/transform'\nimport rsvp from 'rsvp'\nimport sort from 'gulp-sort'\nimport vfs from 'vinyl-fs'\n\nconst Promise = rsvp.Promise\n\nexport default class i18nextParser extends Plugin {\n  constructor(inputNodes, options = {}) {\n    super(...arguments)\n    this.options = options\n  }\n\n  build() {\n    const outputPath = this.outputPath\n    return new Promise((resolve, reject) => {\n      const files = []\n      let count = 0\n\n      vfs\n        .src(this.inputPaths.map((x) => x + '/**/*.{js,hbs}'))\n        .pipe(sort())\n        .pipe(\n          new i18nTransform(this.options)\n            .on('reading', function (file) {\n              if (!this.options.silent) {\n                console.log('  [read]  '.green + file.path)\n              }\n              count++\n            })\n            .on('data', function (file) {\n              files.push(fse.outputFile(file.path, file.contents))\n              if (!this.options.silent) {\n                console.log('  [write] '.green + file.path)\n              }\n            })\n            .on('error', function (message, region) {\n              if (typeof region === 'string') {\n                message += ': ' + region.trim()\n              }\n              console.log('  [error] '.red + message)\n            })\n            .on('finish', function () {\n              if (!this.options.silent) {\n                console.log()\n              }\n              console.log('  Stats:  '.yellow + count + ' files were parsed')\n\n              Promise.all(files).then(() => {\n                resolve(files)\n              })\n            })\n        )\n    })\n  }\n}\n"],"file":"broccoli.js"}